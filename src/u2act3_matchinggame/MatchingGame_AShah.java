/*
 Angel Shah
August 9, 2018
ICS4UE
Mr.Jeg
Mathing Game- uses arrays to simulate a matching game.
 a grid of cards will be displayed and the user is to select 2 cards at a time 
looking for matching cards. The goal is to see how quickly the user can find all the matches.

 */
package u2act3_matchinggame;

/**
 *
 * @author angel
 */
import java.util.*;// import for arraylist

import javax.swing.ImageIcon;// imagecon import
public class MatchingGame_AShah extends javax.swing.JFrame {
    
   
    //ArrayLists are set up to hold cards in original list and cards set at random.
    
    ArrayList<String> cards = new ArrayList <String>();
    ArrayList<String> set = new ArrayList <String>();
    
    //ImageIcon variables are set up to hold and change the pictures for matching.
    ImageIcon a =new ImageIcon("cricket.png");
    ImageIcon b =new ImageIcon("pingpong.jpg");
    ImageIcon c =new ImageIcon("tennis.png");
    ImageIcon d =new ImageIcon("basketball.jpg");
    ImageIcon e =new ImageIcon("volleyball.png");
    ImageIcon f =new ImageIcon("baseball.png");
   
    ImageIcon back =new ImageIcon("cardback.jpg");
    ImageIcon done =new ImageIcon("done.jpg");

    int count, c1, c2,card1,card2;// global variables declared
    int cardsLeft=12;// this cardsLeft var will be useful when we need to display congratulations to the user at the end of the game
    
    int[] change= new int[12];// match checking array is created globally
    /**
     * Creates new form MatchingGame_AShah
     */
    public MatchingGame_AShah() {
        initComponents();
        
        btnGuessAgain.setEnabled(false);// guess again button is disabled so that users don;t accidentally click it first instead of play
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBackgroundColour = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        Card2 = new javax.swing.JButton();
        Card3 = new javax.swing.JButton();
        Card4 = new javax.swing.JButton();
        Card5 = new javax.swing.JButton();
        Card1 = new javax.swing.JButton();
        Card7 = new javax.swing.JButton();
        Card8 = new javax.swing.JButton();
        Card6 = new javax.swing.JButton();
        Card10 = new javax.swing.JButton();
        Card11 = new javax.swing.JButton();
        Card12 = new javax.swing.JButton();
        Card9 = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnGuessAgain = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        txtFieldDisplay = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelBackgroundColour.setBackground(new java.awt.Color(76, 157, 200));

        lblTitle.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 51));
        lblTitle.setText("Matching Game");

        Card2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/u2act3_matchinggame/cardback.jpg"))); // NOI18N
        Card2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card2ActionPerformed(evt);
            }
        });

        Card3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/u2act3_matchinggame/cardback.jpg"))); // NOI18N
        Card3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card3ActionPerformed(evt);
            }
        });

        Card4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/u2act3_matchinggame/cardback.jpg"))); // NOI18N
        Card4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card4ActionPerformed(evt);
            }
        });

        Card5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/u2act3_matchinggame/cardback.jpg"))); // NOI18N
        Card5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card5ActionPerformed(evt);
            }
        });

        Card1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/u2act3_matchinggame/cardback.jpg"))); // NOI18N
        Card1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card1ActionPerformed(evt);
            }
        });

        Card7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/u2act3_matchinggame/cardback.jpg"))); // NOI18N
        Card7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card7ActionPerformed(evt);
            }
        });

        Card8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/u2act3_matchinggame/cardback.jpg"))); // NOI18N
        Card8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card8ActionPerformed(evt);
            }
        });

        Card6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/u2act3_matchinggame/cardback.jpg"))); // NOI18N
        Card6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card6ActionPerformed(evt);
            }
        });

        Card10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/u2act3_matchinggame/cardback.jpg"))); // NOI18N
        Card10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card10ActionPerformed(evt);
            }
        });

        Card11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/u2act3_matchinggame/cardback.jpg"))); // NOI18N
        Card11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card11ActionPerformed(evt);
            }
        });

        Card12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/u2act3_matchinggame/cardback.jpg"))); // NOI18N
        Card12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card12ActionPerformed(evt);
            }
        });

        Card9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/u2act3_matchinggame/cardback.jpg"))); // NOI18N
        Card9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card9ActionPerformed(evt);
            }
        });

        btnPlay.setText("Play");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnGuessAgain.setText("Guess Again");
        btnGuessAgain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuessAgainActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        txtFieldDisplay.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtFieldDisplay.setText("Click the Play button to start. Make sure to click Guess Again after each guess.");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 0));
        jLabel1.setText("Sports Theme");

        javax.swing.GroupLayout panelBackgroundColourLayout = new javax.swing.GroupLayout(panelBackgroundColour);
        panelBackgroundColour.setLayout(panelBackgroundColourLayout);
        panelBackgroundColourLayout.setHorizontalGroup(
            panelBackgroundColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBackgroundColourLayout.createSequentialGroup()
                .addGroup(panelBackgroundColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBackgroundColourLayout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addGroup(panelBackgroundColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblTitle)
                            .addGroup(panelBackgroundColourLayout.createSequentialGroup()
                                .addGroup(panelBackgroundColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Card1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Card5, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Card9, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(54, 54, 54)
                                .addGroup(panelBackgroundColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(panelBackgroundColourLayout.createSequentialGroup()
                                        .addComponent(Card10, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Card11, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelBackgroundColourLayout.createSequentialGroup()
                                        .addComponent(Card2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(49, 49, 49)
                                        .addComponent(Card3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelBackgroundColourLayout.createSequentialGroup()
                                        .addComponent(Card6, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Card7, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(43, 43, 43)
                        .addGroup(panelBackgroundColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Card4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Card8, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Card12, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelBackgroundColourLayout.createSequentialGroup()
                        .addGap(297, 297, 297)
                        .addComponent(jLabel1))
                    .addGroup(panelBackgroundColourLayout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addGroup(panelBackgroundColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFieldDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelBackgroundColourLayout.createSequentialGroup()
                                .addComponent(btnPlay)
                                .addGap(116, 116, 116)
                                .addComponent(btnGuessAgain)
                                .addGap(95, 95, 95)
                                .addComponent(btnExit)))))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        panelBackgroundColourLayout.setVerticalGroup(
            panelBackgroundColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBackgroundColourLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(panelBackgroundColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Card2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelBackgroundColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Card5, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card7, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card8, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card6, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(panelBackgroundColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Card11, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card10, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card12, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card9, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(95, 95, 95)
                .addGroup(panelBackgroundColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPlay)
                    .addComponent(btnGuessAgain)
                    .addComponent(btnExit))
                .addGap(46, 46, 46)
                .addComponent(txtFieldDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackgroundColour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackgroundColour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Card2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card2ActionPerformed
       
         String temp = cards.get(1);
        
        if (temp.equals("0")) {
            Card2.setIcon(a);
        } else if (temp.equals("1")) {
            Card2.setIcon(b);
        } else if (temp.equals("2")) {
            Card2.setIcon(c);
        } else if (temp.equals("3")) {
            Card2.setIcon(d);
        } else if (temp.equals("4")) {
            Card2.setIcon(e);
        } else if (temp.equals("5")) {
            Card2.setIcon(f);
        } 
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[1] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[1] = 0;
        }
        
    }//GEN-LAST:event_Card2ActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
       System.exit(0);// exits the program and closes the jframe window when the exit button is clicked
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
      
        btnPlay.setEnabled(false);// the play button is disabled so that user doesn't accidentally click it again
        btnGuessAgain.setEnabled(true);// the guess again button is enabled to click again now that user has clicked play first
        
        for(int z=0;z<=11;z++){// sets up the array to check if a match has been made.
            change[z]=1;
        }
        
        String temp;
        for(int x=0; x<=5; x++){//outer loop puts the numbers zero to seven in the set arrayList.
            for(int y=1; y<=2;y++){//inner loop puts the numbers in two consecutive array entries.
                temp= Integer.toString(x);
                set.add(temp);//puts the entry in the next available position.
            }  
        }
       
        for(int x=0; x<=11;x++){
            double index=Math.floor(Math.random()*(12-x));//creates a random number and converts it to integer status.  
            int index1=(int)index;
            /*
            next two lines add the card to the random arrayList cards, remove them from the original array, then renumber the remaining cards. 
            The random number is then generated again, but for one less element.
            */
            cards.add(set.get(index1));
            set.remove(set.get(index1));
        }
        
    }//GEN-LAST:event_btnPlayActionPerformed

    private void Card1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card1ActionPerformed
       
        // THE FOLLOWING LINES OF COMMENTS APPLY TO ALL THE CARD BUTTON METHODS AND SO WILL NOT BE REPEATED AGAIN FOR ALL THE OTHER CARD METHODS
        
         String temp = cards.get(0);//first line checks to see what random picture is placed in the box.
        
        if (temp.equals("0")) {//checks the card and assigns the proper picture.
            Card1.setIcon(a);//changes the button icon to the correct picture.


        } else if (temp.equals("1")) {
            Card1.setIcon(b);
        } else if (temp.equals("2")) {
            Card1.setIcon(c);
        } else if (temp.equals("3")) {
            Card1.setIcon(d);
        } else if (temp.equals("4")) {
            Card1.setIcon(e);
        } else if (temp.equals("5")) {
            Card1.setIcon(f);
        } 
        
        // set the card chosen to one or two so that it can be checked for a match.
        count++;
        if (count == 1) {//sets the appropriate card chosen, and then sets the change array to show that the card icon has been changed.
            c1 = Integer.parseInt(temp);
            change[0] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[0] = 0;
        }
        
        
    }//GEN-LAST:event_Card1ActionPerformed

    private void Card3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card3ActionPerformed
      
         String temp = cards.get(2);
        
        if (temp.equals("0")) {
            Card3.setIcon(a);
        } else if (temp.equals("1")) {
            Card3.setIcon(b);
        } else if (temp.equals("2")) {
            Card3.setIcon(c);
        } else if (temp.equals("3")) {
            Card3.setIcon(d);
        } else if (temp.equals("4")) {
            Card3.setIcon(e);
        } else if (temp.equals("5")) {
            Card3.setIcon(f);
        } 
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[2] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[2] = 0;
        }
    }//GEN-LAST:event_Card3ActionPerformed

    private void Card4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card4ActionPerformed
     String temp = cards.get(3);
        
        if (temp.equals("0")) {
            Card4.setIcon(a);
        } else if (temp.equals("1")) {
            Card4.setIcon(b);
        } else if (temp.equals("2")) {
            Card4.setIcon(c);
        } else if (temp.equals("3")) {
            Card4.setIcon(d);
        } else if (temp.equals("4")) {
            Card4.setIcon(e);
        } else if (temp.equals("5")) {
            Card4.setIcon(f);
        } 
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[3] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[3] = 0;
        }
    }//GEN-LAST:event_Card4ActionPerformed

    private void Card5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card5ActionPerformed
         
        String temp = cards.get(4);
        
        if (temp.equals("0")) {
            Card5.setIcon(a);
        } else if (temp.equals("1")) {
            Card5.setIcon(b);
        } else if (temp.equals("2")) {
            Card5.setIcon(c);
        } else if (temp.equals("3")) {
            Card5.setIcon(d);
        } else if (temp.equals("4")) {
            Card5.setIcon(e);
        } else if (temp.equals("5")) {
            Card5.setIcon(f);
        } 
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[4] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[4] = 0;
        }
    }//GEN-LAST:event_Card5ActionPerformed

    private void Card6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card6ActionPerformed
          String temp = cards.get(5);
        
        if (temp.equals("0")) {
            Card6.setIcon(a);
        } else if (temp.equals("1")) {
            Card6.setIcon(b);
        } else if (temp.equals("2")) {
            Card6.setIcon(c);
        } else if (temp.equals("3")) {
            Card6.setIcon(d);
        } else if (temp.equals("4")) {
            Card6.setIcon(e);
        } else if (temp.equals("5")) {
            Card6.setIcon(f);
        } 
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[5] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[5] = 0;
        }
    }//GEN-LAST:event_Card6ActionPerformed

    private void Card7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card7ActionPerformed
         
        String temp = cards.get(6);
        
        if (temp.equals("0")) {
            Card7.setIcon(a);
        } else if (temp.equals("1")) {
            Card7.setIcon(b);
        } else if (temp.equals("2")) {
            Card7.setIcon(c);
        } else if (temp.equals("3")) {
            Card7.setIcon(d);
        } else if (temp.equals("4")) {
            Card7.setIcon(e);
        } else if (temp.equals("5")) {
            Card7.setIcon(f);
        } 
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[6] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[6] = 0;
        }
    }//GEN-LAST:event_Card7ActionPerformed

    private void Card8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card8ActionPerformed
           String temp = cards.get(7);
        
        if (temp.equals("0")) {
            Card8.setIcon(a);
        } else if (temp.equals("1")) {
            Card8.setIcon(b);
        } else if (temp.equals("2")) {
            Card8.setIcon(c);
        } else if (temp.equals("3")) {
            Card8.setIcon(d);
        } else if (temp.equals("4")) {
            Card8.setIcon(e);
        } else if (temp.equals("5")) {
            Card8.setIcon(f);
        } 
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[7] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[7] = 0;
        }
    }//GEN-LAST:event_Card8ActionPerformed

    private void Card9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card9ActionPerformed
         String temp = cards.get(8);
        
        if (temp.equals("0")) {
            Card9.setIcon(a);
        } else if (temp.equals("1")) {
            Card9.setIcon(b);
        } else if (temp.equals("2")) {
            Card9.setIcon(c);
        } else if (temp.equals("3")) {
            Card9.setIcon(d);
        } else if (temp.equals("4")) {
            Card9.setIcon(e);
        } else if (temp.equals("5")) {
            Card9.setIcon(f);
        } 
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[8] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[8] = 0;
        }
    }//GEN-LAST:event_Card9ActionPerformed

    private void Card10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card10ActionPerformed
        String temp = cards.get(9);
        
        if (temp.equals("0")) {
            Card10.setIcon(a);
        } else if (temp.equals("1")) {
            Card10.setIcon(b);
        } else if (temp.equals("2")) {
            Card10.setIcon(c);
        } else if (temp.equals("3")) {
            Card10.setIcon(d);
        } else if (temp.equals("4")) {
            Card10.setIcon(e);
        } else if (temp.equals("5")) {
            Card10.setIcon(f);
        } 
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[9] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[9] = 0;
        }
    }//GEN-LAST:event_Card10ActionPerformed

    private void Card11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card11ActionPerformed
          String temp = cards.get(10);
        
        if (temp.equals("0")) {
            Card11.setIcon(a);
        } else if (temp.equals("1")) {
            Card11.setIcon(b);
        } else if (temp.equals("2")) {
            Card11.setIcon(c);
        } else if (temp.equals("3")) {
            Card11.setIcon(d);
        } else if (temp.equals("4")) {
            Card11.setIcon(e);
        } else if (temp.equals("5")) {
            Card11.setIcon(f);
        } 
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[10] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[10] = 0;
        }
    }//GEN-LAST:event_Card11ActionPerformed

    private void Card12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card12ActionPerformed
         String temp = cards.get(11);
        
        if (temp.equals("0")) {
            Card12.setIcon(a);
        } else if (temp.equals("1")) {
            Card12.setIcon(b);
        } else if (temp.equals("2")) {
            Card12.setIcon(c);
        } else if (temp.equals("3")) {
            Card12.setIcon(d);
        } else if (temp.equals("4")) {
            Card12.setIcon(e);
        } else if (temp.equals("5")) {
            Card12.setIcon(f);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[11] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[11] = 0;
        }
    }//GEN-LAST:event_Card12ActionPerformed

    private void btnGuessAgainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuessAgainActionPerformed
       
        count = 0;
        if (c1 == c2) {//checks to see if the same card has been chosen, then changes the buttons to the done icon.
            for (int y = 1; y <= 2; y++) {
                if (change[0] == 0) {
                    Card1.setIcon(done);
                    change[0] = 2;
                    cardsLeft--;// if a match is found the number of cards left is decreased
                } else if (change[1] == 0) {
                    Card2.setIcon(done);
                    change[1] = 2;
                    cardsLeft--;
                } else if (change[2] == 0) {
                    Card3.setIcon(done);
                    cardsLeft--;
                    change[2] = 2;
                } else if (change[3] == 0) {
                    Card4.setIcon(done);
                    cardsLeft--;
                    change[3] = 2;
                } else if (change[4] == 0) {
                    Card5.setIcon(done);
                    cardsLeft--;
                    change[4] = 2;
                } else if (change[5] == 0) {
                    Card6.setIcon(done);
                    cardsLeft--;
                    change[5] = 2;
                } else if (change[6] == 0) {
                    Card7.setIcon(done);
                    cardsLeft--;
                    change[6] = 2;
                } else if (change[7] == 0) {
                    Card8.setIcon(done);
                    cardsLeft--;
                    change[7] = 2;
                } else if (change[8] == 0) {
                    Card9.setIcon(done);
                    cardsLeft--;
                    change[8] = 2;
                } else if (change[9] == 0) {
                    Card10.setIcon(done);
                    cardsLeft--;
                    change[9] = 2;
                } else if (change[10] == 0) {
                    Card11.setIcon(done);
                    cardsLeft--;
                    change[10] = 2;
                } else if (change[11] == 0) {
                    Card12.setIcon(done);
                    cardsLeft--;
                    change[11] = 2;
                } 
            }
            if (cardsLeft==0){// if there are no cards left to guess then the message "CONGRATULATIONS!" will show
                this.txtFieldDisplay.setText("CONGRATULATIONS!");
            }
        }
        else {

            for (int z = 1; z <= 2; z++) {

                if (change[0] == 0) {// if they are not equal, the buttons change back to the cardback icon.
                    Card1.setIcon(back);
                    change[0] = 1;
                } else if (change[1] == 0) {
                    Card2.setIcon(back);
                    change[1] = 1;
                } else if (change[2] == 0) {
                    Card3.setIcon(back);
                    change[2] = 1;
                } else if (change[3] == 0) {
                    Card4.setIcon(back);
                    change[3] = 1;
                } else if (change[4] == 0) {
                    Card5.setIcon(back);
                    change[4] = 1;
                } else if (change[5] == 0) {
                    Card6.setIcon(back);
                    change[5] = 1;
                } else if (change[6] == 0) {
                    Card7.setIcon(back);
                    change[6] = 1;
                } else if (change[7] == 0) {
                    Card8.setIcon(back);
                    change[7] = 1;
                } else if (change[8] == 0) {
                    Card9.setIcon(back);
                    change[8] = 1;
                } else if (change[9] == 0) {
                    Card10.setIcon(back);
                    change[9] = 1;
                } else if (change[10] == 0) {
                    Card11.setIcon(back);
                    change[10] = 1;
                } else if (change[11] == 0) {
                    Card12.setIcon(back);
                    change[11] = 1;
                }                                
            }
        }                        
        
        
    }//GEN-LAST:event_btnGuessAgainActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchingGame_AShah.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchingGame_AShah.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchingGame_AShah.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchingGame_AShah.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatchingGame_AShah().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Card1;
    private javax.swing.JButton Card10;
    private javax.swing.JButton Card11;
    private javax.swing.JButton Card12;
    private javax.swing.JButton Card2;
    private javax.swing.JButton Card3;
    private javax.swing.JButton Card4;
    private javax.swing.JButton Card5;
    private javax.swing.JButton Card6;
    private javax.swing.JButton Card7;
    private javax.swing.JButton Card8;
    private javax.swing.JButton Card9;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnGuessAgain;
    private javax.swing.JButton btnPlay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel panelBackgroundColour;
    private javax.swing.JTextField txtFieldDisplay;
    // End of variables declaration//GEN-END:variables
}
